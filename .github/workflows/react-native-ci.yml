name: React Native Android CI

on:
  push:
    branches:
      - main

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install  

      - name: Install Java and Gradle
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-  

      - name: Grant execute permission to Gradle
        run: chmod +x android/gradlew

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease --no-daemon

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/app-release.apk

  
  build-ios:
    runs-on: macos-latest  # Uses latest macOS runner with Xcode

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer

      - name: Install Dependencies
        run: |
          brew install cocoapods
          pod install --project-directory=ios

      - name: Set Up Code Signing
        env:
          CERT_PASSWORD: ${{ secrets.APPLE_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
        run: |
          # Decode and Import Apple Certificate
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -k ~/Library/Keychains/login.keychain-db -P "$CERT_PASSWORD" -T /usr/bin/codesign

          # Decode and Install Provisioning Profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

          # Set Keychain Access
          security set-key-partition-list -S apple-tool:,apple: -s -k "$CERT_PASSWORD" ~/Library/Keychains/login.keychain-db

      - name: Build iOS App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          xcodebuild clean build \
            -workspace CICD_CLI_Demo.xcworkspace \
            -scheme CICD_CLI_Demo \
            -sdk iphoneos \
            -configuration Release \
            -archivePath CICD_CLI_Demo.xcarchive \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="profile.mobileprovision"

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath CICD_CLI_Demo.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath output

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Build
          path: output/*.ipa